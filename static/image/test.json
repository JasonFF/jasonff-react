{"test":["# React 单页面应用结构总结\n\n> - React：页面展示\n> - Redux：数据控制\n> - react-router：路由控制\n> - webpack：打包发布\n> - sass：主题控制\n> - nginx：静态页面服务器\n\n\n## — React：页面展示\n> 1. 路由页面\n> 1. 通用组件\n> 1. 静态资源\n\n### —— 路由页面 --> containers\n\n    1. index来控制所有页面\n    2. 样式采用sass并且用文件夹形式整理一起\n    3. 页面唯一使用的图片，最好放在同一个文件夹下，然后用 webpack require\n\n### —— 通用组件 --> components\n\n    1. index来控制所有组件\n    2. 样式采用sass并且用文件夹形式整理一起\n    3. 组件使用的图片，放在同一个文件夹下，然后用 webpack require\n\n### —— 静态资源 --> static\n\n    1. 直接调用\n\n\n\n## — Redux：数据控制\n> 1. actions\n> 1. reducers\n> 1. middleware\n\n\n### —— actions --> 请求数据与改变state状态\n### —— reducers --> 共同组成state树\n\n    1. 每个页面一个module，同一个页面的acitons和reducers放在一起\n    2. 用index来维护所有的需要外界调用的actions\n    3. 用reducer.js来将所有页面的reducers管理与合并起来\n\n### —— middleware --> 中间件\n\n    1. redux-thunk => 便于在 aciton 中 dispatch\n    2. react-router-redux => 便于在 state 中获取路由信息\n    3. redux-devtools => 便于开发调试\n\n## — react-router：路由控制\n> 1. store\n> 1. onEnter\n> 1. 全局思维\n\n\n    store --> redux 创建的 store 用于 dispatch 到 state 树中\n    onEnter --> 控制页面的进入，相当于在页面进入前搞一些事情\n    全局思维 --> 如果是全局需要的数据，绝对不在页面中处理。可以在onEnter，可以在App\n\n\n## — webpack：打包发布\n    首屏优化的最佳解决方案\n\n\n\n## — sass：主题控制\n    用sass语法来提升编写样式的速度，并且管理样式\n\n## — nginx：静态页面服务器\n\n\n    # /nginx.config\n\n    #user  nobody;\n    worker_processes  1;\n\n    #error_log  logs/error.log;\n    #error_log  logs/error.log  notice;\n    #error_log  logs/error.log  info;\n\n    #pid        logs/nginx.pid;\n\n\n    events {\n        worker_connections  1024;\n    }\n\n\n    http {\n        include       mime.types;\n        default_type  application/octet-stream;\n\n\n        sendfile        on;\n\n        keepalive_timeout  65;\n\n        #gzip  on;\n\n        include        vhosts/*;\n    }\n\n    ```\n    ```\n    # /vhosts/erp-web.config\n\n    server {\n        listen       8010;\n        server_name  localhost;\n\n        root /Users/jasonff/project/erp-web;\n\n        gzip on;\n\n        location / {\n            try_files $uri @fallback;\n        }\n\n        location @fallback {\n            rewrite .* /index.html break;\n        }\n\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n    }\n"]}